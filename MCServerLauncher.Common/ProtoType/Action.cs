// This file is automatically generated.
// DO NOT EDIT THIS FILE!

using MCServerLauncher.Common.ProtoType.Event;
using MCServerLauncher.Common.ProtoType.Files;
using MCServerLauncher.Common.ProtoType.Instance;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;

namespace MCServerLauncher.Common.ProtoType.Action
{
    public enum ActionType
    {
        // Event subsystem
        SubscribeEvent,
        UnsubscribeEvent,

        // MISC
        Ping,
        GetSystemInfo,
        GetPermissions,
        GetJavaList,
        GetDirectoryInfo,
        GetFileInfo,

        // File down/upload
        FileUploadRequest,
        FileUploadChunk,
        FileUploadCancel,
        FileDownloadRequest,
        FileDownloadRange,
        FileDownloadClose,

        // Instance operation
        AddInstance,
        RemoveInstance,
        StartInstance,
        StopInstance,
        KillInstance,
        SendToInstance,
        GetInstanceStatus,
        GetAllStatus
    }
}

namespace MCServerLauncher.Common.ProtoType.Action.Parameters
{
    public interface IActionParameter
    {
    }

    public sealed record EmptyActionParameter : IActionParameter;

    public sealed record SubscribeEventParameter : IActionParameter
    {
        [JsonRequired] public EventType Type { get; init; }
        public JToken? Meta { get; init; }
    }

    public sealed record UnsubscribeEventParameter : IActionParameter
    {
        [JsonRequired] public EventType Type { get; init; }
        public JToken? Meta { get; init; }
    }

    public sealed record FileUploadRequestParameter : IActionParameter
    {
        public string? Path { get; init; }
        public string? Sha1 { get; init; }
        public long? Timeout { get; init; }
        [JsonRequired] public long Size { get; init; }
    }

    public sealed record FileUploadChunkParameter : IActionParameter
    {
        [JsonRequired] public Guid FileId { get; init; }
        [JsonRequired] public long Offset { get; init; }
        [JsonRequired] public string Data { get; init; }
    }

    public sealed record FileUploadCancelParameter : IActionParameter
    {
        [JsonRequired] public Guid FileId { get; init; }
    }

    public sealed record FileDownloadRequestParameter : IActionParameter
    {
        [JsonRequired] public string Path { get; init; }
        public long? Timeout { get; init; }
    }

    public sealed record FileDownloadRangeParameter : IActionParameter
    {
        [JsonRequired] public Guid FileId { get; init; }
        [JsonRequired] public string Range { get; init; }
    }

    public sealed record FileDownloadCloseParameter : IActionParameter
    {
        [JsonRequired] public Guid FileId { get; init; }
    }

    public sealed record GetFileInfoParameter : IActionParameter
    {
        [JsonRequired] public string Path { get; init; }
    }

    public sealed record GetDirectoryInfoParameter : IActionParameter
    {
        [JsonRequired] public string Path { get; init; }
    }

    public sealed record AddInstanceParameter : IActionParameter
    {
        [JsonRequired] public InstanceFactorySetting Setting { get; init; }
    }

    public sealed record RemoveInstanceParameter : IActionParameter
    {
        [JsonRequired] public Guid Id { get; init; }
    }

    public sealed record StartInstanceParameter : IActionParameter
    {
        [JsonRequired] public Guid Id { get; init; }
    }

    public sealed record StopInstanceParameter : IActionParameter
    {
        [JsonRequired] public Guid Id { get; init; }
    }

    public sealed record SendToInstanceParameter : IActionParameter
    {
        [JsonRequired] public Guid Id { get; init; }
        [JsonRequired] public string Message { get; init; }
    }

    public sealed record KillInstanceParameter : IActionParameter
    {
        [JsonRequired] public Guid Id { get; init; }
    }

    public sealed record GetInstanceStatusParameter : IActionParameter
    {
        [JsonRequired] public Guid Id { get; init; }
    }
}

namespace MCServerLauncher.Common.ProtoType.Action.Results
{
    public interface IActionResult
    {
    }

    public sealed record EmptyActionResult : IActionResult;

    public sealed record GetPermissionsResult : IActionResult
    {
        [JsonRequired] public string[] Permissions { get; init; }
    }

    public sealed record PingResult : IActionResult
    {
        [JsonRequired] public long Time { get; init; }
    }

    public sealed record GetJavaListResult : IActionResult
    {
        [JsonRequired] public List<JavaInfo> JavaList { get; init; }
    }

    public sealed record FileUploadRequestResult : IActionResult
    {
        [JsonRequired] public Guid FileId { get; init; }
    }

    public sealed record FileUploadChunkResult : IActionResult
    {
        [JsonRequired] public bool Done { get; init; }
        [JsonRequired] public long Received { get; init; }
    }

    public sealed record FileDownloadRequestResult : IActionResult
    {
        [JsonRequired] public Guid FileId { get; init; }
        [JsonRequired] public long Size { get; init; }
        [JsonRequired] public string Sha1 { get; init; }
    }

    public sealed record FileDownloadRangeResult : IActionResult
    {
        [JsonRequired] public string Content { get; init; }
    }

    public sealed record GetFileInfoResult : IActionResult
    {
        [JsonRequired] public FileMetadata Meta { get; init; }
    }

    public sealed record GetDirectoryInfoResult : IActionResult
    {
        public string? Parent { get; init; }
        [JsonRequired] public DirectoryEntry.FileInformation[] Files { get; init; }
        [JsonRequired] public DirectoryEntry.DirectoryInformation[] Directories { get; init; }
    }

    public sealed record AddInstanceResult : IActionResult
    {
        [JsonRequired] public bool Done { get; init; }
    }

    public sealed record RemoveInstanceResult : IActionResult
    {
        [JsonRequired] public bool Done { get; init; }
    }

    public sealed record StartInstanceResult : IActionResult
    {
        [JsonRequired] public bool Done { get; init; }
    }

    public sealed record StopInstanceResult : IActionResult
    {
        [JsonRequired] public bool Done { get; init; }
    }

    public sealed record GetInstanceStatusResult : IActionResult
    {
        [JsonRequired] public InstanceStatus Status { get; init; }
    }

    public sealed record GetAllStatusResult : IActionResult
    {
        [JsonRequired] public IDictionary<Guid, InstanceStatus> Status { get; init; }
    }

    public sealed record GetSystemInfoResult : IActionResult
    {
        [JsonRequired] public SystemInfo Info { get; init; }
    }
}