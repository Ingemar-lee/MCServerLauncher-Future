// This file is automatically generated.
// DO NOT EDIT THIS FILE!

using MCServerLauncher.Common.ProtoType.Event;
using MCServerLauncher.Common.ProtoType.Files;
using MCServerLauncher.Common.ProtoType.Instance;
using MCServerLauncher.Common.System;
using Newtonsoft.Json.Linq;

namespace MCServerLauncher.Common.ProtoType.Action
{
    public enum ActionType
    {
        // Event subsystem
        SubscribeEvent,
        UnsubscribeEvent,

        // MISC
        Ping,
        GetSystemInfo,
        GetPermissions,
        GetJavaList,
        GetDirectoryInfo,
        GetFileInfo,

        // File down/upload
        FileUploadRequest,
        FileUploadChunk,
        FileUploadCancel,
        FileDownloadRequest,
        FileDownloadChunk,
        FileDownloadClose,

        // Instance operation
        AddInstance,
        RemoveInstance,
        StartInstance,
        StopInstance,
        KillInstance,
        SendToInstance,
        GetInstanceStatus
    }
}

namespace MCServerLauncher.Common.ProtoType.Action.Parameters
{
    public interface IActionParameter
    {
    }

    public sealed record EmptyActionParameter : IActionParameter;

    public sealed record SubscribeEventParameter(EventType Type, JObject? Meta) : IActionParameter;

    public sealed record UnsubscribeEventParameter(EventType Type, JObject? Meta) : IActionParameter;

    public sealed record FileUploadRequestParameter(string? Path, string? Sha1, long? Timeout, long Size)
        : IActionParameter;

    public sealed record FileUploadChunkParameter(Guid FileId, long Offset, string Data) : IActionParameter;

    public sealed record FileUploadCancelParameter(Guid FileId) : IActionParameter;

    public sealed record FileDownloadRequestParameter(string Path, long? Timeout) : IActionParameter;

    public sealed record FileDownloadRangeParameter(Guid FileId, string Range) : IActionParameter;

    public sealed record FileDownloadCloseParameter(Guid FileId) : IActionParameter;

    public sealed record GetFileInfoParameter(string Path) : IActionParameter;

    public sealed record GetDirectoryInfoParameter(string Path) : IActionParameter;

    public sealed record AddInstanceParameter(InstanceFactorySetting Setting) : IActionParameter;

    public sealed record RemoveInstanceParameter(Guid Id) : IActionParameter;

    public sealed record StartInstanceParameter(Guid Id) : IActionParameter;

    public sealed record StopInstanceParameter(Guid Id) : IActionParameter;

    public sealed record SendToInstanceParameter(Guid Id, string Message) : IActionParameter;

    public sealed record KillInstanceParameter(Guid Id) : IActionParameter;

    public sealed record GetInstanceStatusParameter(Guid Id) : IActionParameter;
}

namespace MCServerLauncher.Common.ProtoType.Action.Results
{
    public interface IActionResult
    {
    }

    public sealed record EmptyActionResult : IActionResult;

    public sealed record GetPermissionsResult(string[] Permissions) : IActionResult;

    public sealed record PingResult(long Time) : IActionResult;

    public sealed record GetJavaListResult(List<JavaInfo> JavaList) : IActionResult;

    public sealed record FileUploadRequestResult(Guid FileId) : IActionResult;

    public sealed record FileUploadChunkResult(bool Done, long Received) : IActionResult;

    public sealed record FileDownloadRequestResult(Guid FileId, long Size, string Sha1) : IActionResult;

    public sealed record FileDownloadRangeResult(string Content) : IActionResult;

    public sealed record GetFileInfoResult(FileMetadata Meta) : IActionResult;

    public sealed record GetDirectoryInfoResult(
        string? Parent,
        DirectoryEntry.FileInformation[] Files,
        DirectoryEntry.DirectoryInformation[] Directories) : IActionResult;

    public sealed record AddInstanceResult(bool Done) : IActionResult;

    public sealed record RemoveInstanceResult(bool Done) : IActionResult;

    public sealed record StartInstanceResult(bool Done) : IActionResult;

    public sealed record StopInstanceResult(bool Done) : IActionResult;

    public sealed record GetInstanceStatusResult(InstanceStatus Status) : IActionResult;

    public sealed record GetAllStatusResult(IDictionary<Guid, InstanceStatus> Status) : IActionResult;

    public sealed record GetSystemInfoResult(SystemInfo Info) : IActionResult;
}