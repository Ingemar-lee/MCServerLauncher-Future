using MCServerLauncher.Daemon.Minecraft.Server;
using MCServerLauncher.Daemon.Minecraft.Server.Factory;
using MCServerLauncher.Daemon.Storage;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;

namespace MCServerLauncher.Daemon.Remote.Action;

/// <summary>
///     Action的消息模版,采用meta-program
///     Generated by "MCServerLauncher.Daemon/Resources/Action/actions_meta.yml"
/// </summary>
public static class Actions
{
    private static readonly JsonSerializer Serializer = JsonSerializer.Create(WebJsonConverter.Settings);

    private static T Deserialize<T>(JObject? data)
    {
        return data!.ToObject<T>(Serializer) ?? throw new ArgumentException("Action request deserialize failed.");
    }


    public interface IActionResponse
    {
        public JObject Into(JsonSerializer serializer)
        {
            return JObject.FromObject(this, serializer);
        }
    }

    public static class Empty
    {
        public static Request RequestOf()
        {
            return new Request();
        }

        public static IActionResponse ResponseOf()
        {
            return new Response();
        }

        public struct Request
        {
        }

        private struct Response : IActionResponse
        {
        }
    }

    public static class Ping
    {
        public static Empty.Request RequestOf(JObject? data)
        {
            return new Empty.Request();
        }

        public static IActionResponse ResponseOf(long time)
        {
            return new Response { Time = time };
        }

        public struct Request
        {
        }

        private struct Response : IActionResponse
        {
            public long Time;
        }
    }

    public static class GetJavaList
    {
        public static Empty.Request RequestOf(JObject? data)
        {
            return new Empty.Request();
        }

        public static IActionResponse ResponseOf(List<JavaScanner.JavaInfo> javaList)
        {
            return new Response { JavaList = javaList };
        }

        public struct Request
        {
        }

        private struct Response : IActionResponse
        {
            public List<JavaScanner.JavaInfo> JavaList;
        }
    }

    public static class FileUploadRequest
    {
        public static Request RequestOf(JObject? data)
        {
            return Deserialize<Request>(data);
        }

        public static IActionResponse ResponseOf(Guid fileId)
        {
            return new Response { FileId = fileId };
        }

        public struct Request
        {
            public string? Path;
            public string? Sha1;
            public long ChunkSize;
            public long Size;
        }

        private struct Response : IActionResponse
        {
            public Guid FileId;
        }
    }

    public static class FileUploadChunk
    {
        public static Request RequestOf(JObject? data)
        {
            return Deserialize<Request>(data);
        }

        public static IActionResponse ResponseOf(bool done, long received)
        {
            return new Response { Done = done, Received = received };
        }

        public struct Request
        {
            public Guid FileId;
            public long Offset;
            public string Data;
        }

        private struct Response : IActionResponse
        {
            public bool Done;
            public long Received;
        }
    }

    public static class FileUploadCancel
    {
        public static Request RequestOf(JObject? data)
        {
            return Deserialize<Request>(data);
        }

        public static IActionResponse ResponseOf()
        {
            return new Response();
        }

        public struct Request
        {
            public Guid FileId;
        }

        private struct Response : IActionResponse
        {
        }
    }

    public static class FileDownloadRequest
    {
        public static Request RequestOf(JObject? data)
        {
            return Deserialize<Request>(data);
        }

        public static IActionResponse ResponseOf(Guid fileId, long size, string sha1)
        {
            return new Response { FileId = fileId, Size = size, Sha1 = sha1 };
        }

        public struct Request
        {
            public string Path;
        }

        private struct Response : IActionResponse
        {
            public Guid FileId;
            public long Size;
            public string Sha1;
        }
    }

    public static class FileDownloadRange
    {
        public static Request RequestOf(JObject? data)
        {
            return Deserialize<Request>(data);
        }

        public static IActionResponse ResponseOf(string content)
        {
            return new Response { Content = content };
        }

        public struct Request
        {
            public Guid FileId;
            public string Range;
        }

        private struct Response : IActionResponse
        {
            public string Content;
        }
    }

    public static class FileDownloadClose
    {
        public static Request RequestOf(JObject? data)
        {
            return Deserialize<Request>(data);
        }

        public static IActionResponse ResponseOf()
        {
            return new Response();
        }

        public struct Request
        {
            public Guid FileId;
        }

        private struct Response : IActionResponse
        {
        }
    }

    public static class GetFileInfo
    {
        public static Request RequestOf(JObject? data)
        {
            return Deserialize<Request>(data);
        }

        public static IActionResponse ResponseOf(FileMetadata meta)
        {
            return new Response { Meta = meta };
        }

        public struct Request
        {
            public string Path;
        }

        private struct Response : IActionResponse
        {
            public FileMetadata Meta;
        }
    }

    public static class GetDirectoryInfo
    {
        public static Request RequestOf(JObject? data)
        {
            return Deserialize<Request>(data);
        }

        public static IActionResponse ResponseOf(string? parent, DirectoryEntry.FileInformation[] files,
            DirectoryEntry.DirectoryInformation[] directories)
        {
            return new Response { Parent = parent, Files = files, Directories = directories };
        }

        public struct Request
        {
            public string Path;
        }

        private struct Response : IActionResponse
        {
            public string? Parent;
            public DirectoryEntry.FileInformation[] Files;
            public DirectoryEntry.DirectoryInformation[] Directories;
        }
    }

    public static class TryAddInstance
    {
        public static Request RequestOf(JObject? data)
        {
            return Deserialize<Request>(data);
        }

        public static IActionResponse ResponseOf(bool done)
        {
            return new Response { Done = done };
        }

        public struct Request
        {
            public InstanceFactorySetting Setting;
            public InstanceFactories Factory;
        }

        private struct Response : IActionResponse
        {
            public bool Done;
        }
    }

    public static class TryRemoveInstance
    {
        public static Request RequestOf(JObject? data)
        {
            return Deserialize<Request>(data);
        }

        public static IActionResponse ResponseOf(bool done)
        {
            return new Response { Done = done };
        }

        public struct Request
        {
            public Guid Id;
        }

        private struct Response : IActionResponse
        {
            public bool Done;
        }
    }

    public static class TryStartInstance
    {
        public static Request RequestOf(JObject? data)
        {
            return Deserialize<Request>(data);
        }

        public static IActionResponse ResponseOf(bool done)
        {
            return new Response { Done = done };
        }

        public struct Request
        {
            public Guid Id;
        }

        private struct Response : IActionResponse
        {
            public bool Done;
        }
    }

    public static class TryStopInstance
    {
        public static Request RequestOf(JObject? data)
        {
            return Deserialize<Request>(data);
        }

        public static IActionResponse ResponseOf(bool done)
        {
            return new Response { Done = done };
        }

        public struct Request
        {
            public Guid Id;
        }

        private struct Response : IActionResponse
        {
            public bool Done;
        }
    }

    public static class SendToInstance
    {
        public static Request RequestOf(JObject? data)
        {
            return Deserialize<Request>(data);
        }

        public static IActionResponse ResponseOf()
        {
            return new Response();
        }

        public struct Request
        {
            public Guid Id;
            public string Message;
        }

        private struct Response : IActionResponse
        {
        }
    }

    public static class KillInstance
    {
        public static Request RequestOf(JObject? data)
        {
            return Deserialize<Request>(data);
        }

        public static IActionResponse ResponseOf()
        {
            return new Response();
        }

        public struct Request
        {
            public Guid Id;
        }

        private struct Response : IActionResponse
        {
        }
    }

    public static class GetInstanceStatus
    {
        public static Request RequestOf(JObject? data)
        {
            return Deserialize<Request>(data);
        }

        public static IActionResponse ResponseOf(InstanceStatus status)
        {
            return new Response { Status = status };
        }

        public struct Request
        {
            public Guid Id;
        }

        private struct Response : IActionResponse
        {
            public InstanceStatus Status;
        }
    }

    public static class GetAllStatus
    {
        public static Empty.Request RequestOf(JObject? data)
        {
            return new Empty.Request();
        }

        public static IActionResponse ResponseOf(IDictionary<Guid, InstanceStatus> status)
        {
            return new Response { Status = status };
        }

        public struct Request
        {
        }

        private struct Response : IActionResponse
        {
            public IDictionary<Guid, InstanceStatus> Status;
        }
    }
}